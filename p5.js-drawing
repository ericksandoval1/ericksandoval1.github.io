<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>p5.js Sketch</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    canvas {
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <script>
    // Your p5.js sketch code goes here
    let shapes = []; // Array to store shapes
    let isDrawing = false; // Flag to track if drawing is in progress
    let shapeType = 0; // 0 for lines, 1 for circles, 2 for continuous growing circles, 3 for rectangles, 4 for squares
    let currentColor; // Global variable to store the current color
    let circleSize = 10; // Initial size of the circle
    let squareSize = 10; // Initial size of the square
    let maxCircleSize = 100; // Maximum size of the circle
    let maxSquareSize = 100; // Maximum size of the square
    let startX, startY; // Variables to store starting position of the line

    function setup() {
      createCanvas(400, 400);
      frameRate(30); // Set a fixed frame rate, adjust as needed
    }

    function draw() {
      background(220);

      // Update and display shapes
      for (let i = 0; i < shapes.length; i++) {
        shapes[i].display();
      }
    }

    function keyPressed() {
      if (key === '1') {
        shapeType = 0; // Switch to drawing lines
      } else if (key === '2') {
        shapeType = 1; // Switch to drawing circles
      } else if (key === '3') {
        shapeType = 2; // Switch to continuous growing circles
      } else if (key === '4') {
        shapeType = 3; // Switch to drawing rectangles
      } else if (key === '5') {
        shapeType = 4; // Switch to drawing squares
      } else if (key === 'q') {
        addVerticalRectangles(); // Add vertical rectangles
      }
    }

    function addVerticalRectangles() {
      let rectWidth = random(20, 80); // Random width for rectangles (updated range)
      let rectHeight = random(height); // Random height for rectangles

      shapes.push(new RectangleShape(random(width), height, rectWidth, rectHeight, false, color(random(255), random(255), random(255))));
    }

    function mousePressed() {
      isDrawing = true;
      currentColor = color(random(255), random(255), random(255)); // Generate random color

      if (shapeType === 0) {
        startX = mouseX;
        startY = mouseY;
      } else if (shapeType === 1 || shapeType === 2) {
        circleSize = 10; // Reset circle size when mouse is pressed
        shapes.push(new CircleShape(mouseX, mouseY, currentColor, circleSize)); // Pass the color to CircleShape constructor
      } else if (shapeType === 3) {
        let size = random(20, 100); // Random size for rectangle
        let isSquare = random() > 0.5; // Randomly determine if it's a square or rectangle
        shapes.push(new RectangleShape(mouseX, mouseY, size, size, isSquare, currentColor));
      } else if (shapeType === 4) {
        squareSize = 10; // Reset square size when mouse is pressed
        shapes.push(new SquareShape(mouseX, mouseY, currentColor, squareSize)); // Pass the color to SquareShape constructor
      }
    }

    function mouseDragged() {
      if (isDrawing && mouseButton === LEFT && shapeType === 0) {
        // Draw the line continuously while dragging
        shapes.push(new LineShape(startX, startY, mouseX, mouseY, currentColor));
        startX = mouseX;
        startY = mouseY;
      } else if (isDrawing && mouseButton === LEFT && shapeType === 2) {
        if (circleSize < maxCircleSize) {
          circleSize += 1; // Increase circle size
        }
        shapes[shapes.length - 1].size = circleSize; // Update size of the last drawn circle
      } else if (isDrawing && mouseButton === LEFT && shapeType === 4) {
        if (squareSize < maxSquareSize) {
          squareSize += 1; // Increase square size
        }
        shapes[shapes.length - 1].size = squareSize; // Update size of the last drawn square
      }
    }

    function mouseReleased() {
      isDrawing = false;
    }

    class LineShape {
      constructor(x1, y1, x2, y2, col) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.color = col;
      }

      display() {
        stroke(this.color);
        strokeWeight(3);
        line(this.x1, this.y1, this.x2, this.y2);
      }
    }

    class CircleShape {
      constructor(x, y, col, size) {
        this.x = x;
        this.y = y;
        this.size = size; // Adjust size of circle
        this.color = col;
      }

      display() {
        fill(this.color);
        noStroke();
        ellipse(this.x, this.y, this.size);
      }
    }

    class SquareShape {
      constructor(x, y, col, size) {
        this.x = x;
        this.y = y;
        this.size = size; // Adjust size of square
        this.color = col;
      }

      display() {
        fill(this.color);
        noStroke();
        rectMode(CENTER);
        rect(this.x, this.y, this.size, this.size);
      }
    }

    class RectangleShape {
      constructor(x,
